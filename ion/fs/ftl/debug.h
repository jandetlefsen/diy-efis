#ifndef FTL_DEBUG_H
#define FTL_DEBUG_H

#include "def.h"

#if (FTL_ENABLE_DEBUG_CODE == true)
#define FTL_DEBUG_BASE_ERROR_NUMBER 10000
FTL_STATUS FTL_DebugStructSize(void);
/*EBLOCK MAPPING ENTRY*/
#define EXPECTED_EBLOCK_MAPPING_ENTRY_SIZE (EBLOCK_MAPPING_ENTRY_SIZE)
#define FTL_EBLOCK_MAPPING_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 1);
#define FTL_EBLOCK_MAPPING_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 2);
#define FTL_EBLOCK_MAPPING_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 3);
/*PPA*/
#define EXPECTED_PPA_MAPPING_ENTRY_SIZE (PPA_MAPPING_ENTRY_SIZE)
#define FTL_PPA_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 4);
#define FTL_PPA_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 5);
#define FTL_PPA_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 6);
/*PPA DIRTY BIT MAP*/
#define EXPECTED_PPA_DIRTY_BITMAP_ENTRY_SIZE (1)
#define FTL_PPA_DIRTY_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 7);
#define FTL_PPA_DIRTY_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 8);
#define FTL_PPA_DIRTY_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 9);
/*EBLOCK MAP DIRTY BIT MAP*/
#define EXPECTED_EBLOCK_MAP_DIRTY_BITMAP_ENTRY_SIZE (1)
#define FTL_EBLOCK_MAP_DIRTY_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 10);
#define FTL_EBLOCK_MAP_DIRTY_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 11);
#define FTL_EBLOCK_MAP_DIRTY_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 12);
/*Flush Log EB Array*/

#define EXPECTED_FLUSH_LOG_ENTRY_SIZE (2 + 2 + 4)
#define FTL_FLUSH_LOG_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 13);
#define FTL_FLUSH_LOG_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 14);
#define FTL_FLUSH_LOG_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 15);
/*Trans Log Array*/

#define EXPECTED_TRANS_LOG_ENTRY_SIZE (2 + 2 + 4)
#define FTL_TRANS_LOG_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 16);
#define FTL_TRANS_LOG_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 18);
#define FTL_TRANS_LOG_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 19);
/*Flush Log Array Count*/

#define EXPECTED_FLUSH_LOG_ARRAY_COUNT_SIZE (2)
#define FTL_FLUSH_LOG_ENTRY_COUNT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 20);
#define FTL_FLUSH_LOG_ARRAY_COUNT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 21);
#define FTL_FLUSH_LOG_ARRAY_COUNT_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 22);
/*Trans Log Array Count*/

#define EXPECTED_TRANS_LOG_ARRAY_COUNT_SIZE (2)
#define FTL_TRANS_LOG_ENTRY_COUNT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 23);
#define FTL_TRANS_LOG_ARRAY_COUNT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 24);
#define FTL_TRANS_LOG_ARRAY_COUNT_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 25);
/*Trans log counters*/

#define EXPECTED_TRANS_LOG_ARRAY_COUNT_SIZE_2 (4)
#define FTL_TRANS_LOG_ENTRY_COUNT_SIZE_MISMATCH_2 (FTL_DEBUG_BASE_ERROR_NUMBER + 26);
#define FTL_TRANS_LOG_ARRAY_COUNT_SIZE_MISMATCH_2 (FTL_DEBUG_BASE_ERROR_NUMBER + 26);
#define FTL_TRANS_LOG_ARRAY_COUNT_MISALIGNED_2  (FTL_DEBUG_BASE_ERROR_NUMBER + 27);
/*Flush Log Counters*/

#define EXPECTED_FLUSH_LOG_ARRAY_COUNT_SIZE_2 (4)
#define FTL_FLUSH_LOG_ENTRY_COUNT_SIZE_MISMATCH_2 (FTL_DEBUG_BASE_ERROR_NUMBER + 28);
#define FTL_FLUSH_LOG_ARRAY_COUNT_SIZE_MISMATCH_2 (FTL_DEBUG_BASE_ERROR_NUMBER + 29);
#define FTL_FLUSH_LOG_ARRAY_COUNT_MISALIGNED_2  (FTL_DEBUG_BASE_ERROR_NUMBER + 30);
/*GC NUm*/
//extern  uint32_t  GCNum[NUM_DEVICES];
#define EXPECTED_GC_NUM_STRUCT_SIZE (4)
#define FTL_GC_NUM_ENTRY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 31);
#define FTL_GC_NUM_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 32);
#define FTL_GC_NUM_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 33);
/*GC_Info*/
//extern  GC_INFO  GC_Info;
#define EXPECTED_GC_INFO_STRUCT_SIZE (1 + 2 + 1 + 2 + 4 + 4 + 1 + 2 + 4 + 4)
#define FTL_GC_INFO_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 34);
#define FTL_GC_INFO_STRUCT_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 34);
/*GC THRESHOLD*/

#define EXPECTED_GC_THRESHOLD_SIZE (2)
#define FTL_GC_THRESHOLD_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 35);
#define FTL_GC_THRESHOLD_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 36);

/*TransferMapIndexEnd*/

#define EXPECTED_TransferMapIndexEnd_SIZE (2)
#define FTL_TransferMapIndexEnd_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 37);
#define FTL_TransferMapIndexEnd_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 38);
/*TransferMapIndexStart*/

#define EXPECTED_TransferMapIndexStart_SIZE (2)
#define FTL_TransferMapIndexStart_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 39);
#define FTL_TransferMapIndexStart_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 40);

/*Transfer Map*/

#define EXPECTED_TRANSFER_MAP_STRUCT_STRUCT_SIZE (1 + 1 + 1 + 4 + 4 + 4 + 2)
#define FTL_TRANSFER_MAP_STRUCT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 41);
#define FTL_TRANSFER_MAP_STRUCT_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 42);
#define FTL_TRANSFER_MAP_STRUCT_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 43);

/*GC move array*/
//extern  uint8_t  GCMoveArray[NUM_PAGES_PER_EBLOCK]; 
#define EXPECTED_GC_MOVE_ARRAY_STRUCT_SIZE (1)
#define FTL_GC_MOVE_ARRAY_STRUCT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 44);
#define FTL_GC_MOVE_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 45);
#define FTL_GC_MOVE_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 46);

/*Trans log Entry*/

#define EXPECTED_TLOG_STRUCT_SIZE ((2 + 1 + 1 + ((2+2)*2) + 4) + (2 + 1 + 1 + ((2+2)*3)) + (2 + 1 + 1 + ((2+ 2)* 2) + 4))
#define FTL_TLOG_STRUCT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 47);
#define FTL_TLOG_STRUCT_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 48);
/*TranslogBEntries*/

#define EXPECTED_TLOGB_SIZE (2)
#define FTL_TLOGB_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 49);
#define FTL_TLOGB_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 50);
/* LastTransLogLba*/
//extern     uint32_t                 LastTransLogLba;
#define EXPECTED_LAST_LBA_SIZE (4)
#define FTL_LAST_LBA_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 51);
#define FTL_LAST_LBA_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 52);

/*pseudoRPB*/
//extern     uint8_t                  pseudoRPB[NUM_DEVICES][VIRTUAL_PAGE_SIZE];
#define EXPECTED_pseudoRPB_STRUCT_SIZE (1)
#define FTL_pseudoRPB_STRUCT_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 53);
#define FTL_pseudoRPB_ARRAY_SIZE_MISMATCH (FTL_DEBUG_BASE_ERROR_NUMBER + 54);
#define FTL_pseudoRPB_ARRAY_MISALIGNED  (FTL_DEBUG_BASE_ERROR_NUMBER + 55);

FTL_STATUS DEBUG_CompareBuffer(uint8_t * source1, uint8_t * source2, uint32_t size);
FTL_STATUS DEBUG_FlushDevice(FTL_DEV devID);
FTL_STATUS DEBUG_EraseOp(FTL_DEV devID, uint16_t logicalEBNum);
FTL_STATUS DEBUG_CompareTables(FTL_DEV devID);
FTL_STATUS DEBUG_CompareTablesAll(void);
FTL_STATUS DEBUG_FlushTablesAll(void);

#if (DEBUG_COMPARE_TABLES == true)
extern uint8_t debugFlushDone;
#endif  // #if (DEBUG_COMPARE_TABLES == true)
#if (DEBUG_ENABLE_LOGGING == true)
#define DEBUG_LOG_WRITE       1
#define DEBUG_LOG_READ        2
#define DEBUG_LOG_DELETE      3
#define DEBUG_LOG_INIT        4
#define DEBUG_LOG_FORCED_GC   5
#define DEBUG_LOG_TABLE_FLUSH 6
void DEBUG_ClearLog(void);
FTL_STATUS DEBUG_ReplayLog(uint32_t LBA, uint32_t NB, uint8_t operation);
FTL_STATUS DEBUG_InsertLog(uint32_t LBA, uint32_t NB, uint8_t operation);
FTL_STATUS FTL_DEBUG_Replay(uint8_t * FileName);

extern uint32_t APICallLogIndex;
#endif

#endif  // #if (FTL_ENABLE_DEBUG_CODE == true)


#if (DEBUG_CACHE_RAM_BD_MODULE == true)

#define DEBUG_DATA_TRANS
#define DEBUG_PROTOTYPE
#define DEBUG_DATA_CLEAR
#define DEBUG_CROSS_BOUNDARY_ROUTE
#define DEBUG_CACHE (false)

/* To be disabled for release. All associated code shoule be moved to test module, since Test array is independent from cache module core. */
#define DEBUG_TEST_ARRAY 

// for test
// test structure
#define EB_TABLE_SIZE (NUMBER_OF_DEVICES*NUMBER_OF_ERASE_BLOCKS*EBLOCK_MAPPING_ENTRY_SIZE) // for test
#define PPA_TABLE_SIZE (NUMBER_OF_DEVICES*NUMBER_OF_ERASE_BLOCKS*NUMBER_OF_PAGES_PER_EBLOCK*PPA_MAPPING_ENTRY_SIZE) // for test

extern uint8_t EBlockMappingTable[EB_TABLE_SIZE];
extern uint8_t PPAMappingTable[PPA_TABLE_SIZE]; 
#ifdef DEBUG_TEST_ARRAY
extern uint32_t EBlockMappingTableTest[NUMBER_OF_ERASE_BLOCKS][EBLOCK_MAPPING_ENTRY_SIZE/4];
extern uint32_t PPAMappingTableTest[NUMBER_OF_ERASE_BLOCKS][(NUMBER_OF_PAGES_PER_EBLOCK * PPA_MAPPING_ENTRY_SIZE)/4];
#endif
#ifdef DEBUG_PROTOTYPE
extern uint8_t gTestFlag;
extern uint8_t arrayOffsetTemp;
extern uint16_t glogicalEBtemp;
#endif

#ifdef DEBUG_CROSS_BOUNDARY_ROUTE
extern uint32_t gCacheHit;
extern uint32_t gCacheMiss;
extern uint32_t gNoUpAndDownCase;
extern uint32_t gNoDownCase;
extern uint32_t gNoUpCase;
extern uint32_t gDistanceUpAndDownCase;
#endif

#endif // #if (DEBUG_CACHE_RAM_BD_MODULE == true)



#endif  // #ifndef FTL_DEBUG_H
